git

sudo apt-get install git

git config --global user.name "mengtz"
git config --global user.email "mtz3@qq.com"

mkdir git
cd git
pwd

git init

ls -ah
   

git add readme.txt
git commit -m "wrote a readme file"

git add file1.txt file2.txt
git commit -m "add 3 files"

git status

git diff

git log
git reset --hard HEAD^
cat readme.txt

git reflog
girt reset --hard commit_id


#工作区（Working Directory）
#版本库（Repository）  工作区有一个隐藏目录.git
#每次修改，如果不add到暂存区，那就不会加入到commit中。

git diff HEAD -- readme.txt

git checkout -- readme.txt
#让这个文件回到最近一次git commit或git add时的状态。


git reset HEAD file
#可以把暂存区的修改撤销掉（unstage）, 用HEAD表示最新的版本


修改——暂存区——本地版本库——远程版本库


git add test.txt
git commit -m "add test.txt"
rm test.txt

git rm test.txt
git commit -m "rm test.txt"

git checkout -- test.txt
#用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。


#远程仓库
由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容.
cat id_rsa.pub
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。

git remote add origin git@github.com:mengtz/learngit.git

#添加后，远程库的名字就是origin，这是Git默认的叫法

git push -u origin master


用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。


从现在起，只要本地作了提交，就可以通过命令：

git push origin master



git clone git@github.com:mengtz/gitskills.git


#GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。



#Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
新提交一次后，dev指针往前移动一步，而master指针不变
Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并
合并完分支后，甚至可以删除dev分支。
删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支


git checkout -b dev

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev


git branch

git checkout master

git merge dev

#git merge命令用于合并指定分支到当前分支

git branch -d dev

git branch



Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>








































